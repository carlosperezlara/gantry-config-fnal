# We assume that assembly on Module PCB position 1 will use ETROC+LGAD subassemblies
# on position 1, 5, 9, and 13 (ie row 1), while Module PCB position 2 will use 
# positions 2, 6, 10, and 14, and so on for Module PCB position 3 and 4

VERSION v2.5
SETLOG PickAndPlace_Sensor_{timestamp}.txt
CLEARLOG
LOADCONFIG "" Config\ETL\TP_Config.txt
LOADCONFIG "" Config\ETL\TP_Site_Config.txt

FLEXREAD $high_int default.light_high_int 40
FLEXREAD $low_int default.light_low_int 40

DIALOG Scripts\PickAndPlace_Sensors_Dialog1.ini
# $pcb_chuck_num &enabled_1 &enabled_2 &enabled_3 &enabled_4 &id_1 &id_2 &id_3 &id_4 &do_lgad_survey

COPY $etroc_chuck_num &chuck_number.top

HOME if-needed

PRINT "Assembly Start"

SETVAC etl_chuck_{$pcb_chuck_num} 1  # vacuum for assembly plate

###==============================================================
###==============================================================
MOVENAME etl_chuck_{$pcb_chuck_num}
### PCB SURVEY
COPY $mod_idx 0
@PCB_SURVEY_LOOP_START
    INC $mod_idx $mod_idx                                                ## increment index
    GOTOIF @PCB_SURVEY_LOOP_END `$mod_idx>4`                             ## exit loop condition
    GOTOIFN @PCB_SURVEY_LOOP_START &enabled_{$mod_idx}                   ## skip this module?
    PRINT "Begin Survey of Module PCB %d, ID=%d" $mod_idx &id_{$mod_idx}
    CALL @SURVEY_PCB $pcb_chuck_num $mod_idx -> $pos $rot                ## survey module
    COPY &pcb_init_pos_{$mod_idx} $pos                                   ## save PCB_INIT_POS_[MOD]
    COPY &pcb_init_rot_{$mod_idx} $rot                                   ## save PCB_INIT_ROT_[MOD]
    TRANSFORML2G &etroc_target_pos_{$mod_idx}_1 &geometry.Module_PCB.A $pos $rot ## save ETROC_TARGET_POS_[MOD]_[1]
    TRANSFORML2G &etroc_target_pos_{$mod_idx}_2 &geometry.Module_PCB.B $pos $rot ## save ETROC_TARGET_POS_[MOD]_[2]
    TRANSFORML2G &etroc_target_pos_{$mod_idx}_3 &geometry.Module_PCB.C $pos $rot ## save ETROC_TARGET_POS_[MOD]_[3]
    TRANSFORML2G &etroc_target_pos_{$mod_idx}_4 &geometry.Module_PCB.D $pos $rot ## save ETROC_TARGET_POS_[MOD]_[4]
    GOTO @PCB_SURVEY_LOOP_START
@PCB_SURVEY_LOOP_END

###==============================================================
###==============================================================
MOVENAME "etl_chuck_{$etroc_chuck_num}"
### ETROC(+LGAD) SURVEY
COPY $mod_idx 0
@ETROC_SURVEY_LOOP_START
    INC $mod_idx $mod_idx                                            ## increment index
    GOTOIF @ETROC_SURVEY_LOOP_END `$mod_idx>4`                       ## exit loop condition
    GOTOIFN @ETROC_SURVEY_LOOP_START &enabled_{$mod_idx}             ## skip this module?
    PRINT "Begin Survey of ETROCs for Module %d, ID=%d" $mod_idx &id_{$mod_idx}
    COPY $chip_idx 0
    @ETROC_SURVEY_INNER_LOOP_START
        INC $chip_idx $chip_idx                                      ## increment index
        GOTOIF @ETROC_SURVEY_INNER_LOOP_END `$chip_idx>4`            ## exit loop condition
        MUL $loc_offset 4 `$chip_idx-1`
        ADD $chip_loc $loc_offset $mod_idx 
        SETVAC etl_chuck_{$etroc_chuck_num}_pos_{$chip_loc} 1        ## activate vaccuum
        CALL @SURVEY_ETROC $etroc_chuck_num $chip_loc -> $pos $rot   ## survey ETROC
        COPY $rot_fixed $rot
        GOTOIF @FIX_ROT_SKIP `$chip_idx>2`
        CALL @FIX_ROT $rot -> $rot_fixed
        @FIX_ROT_SKIP
        COPY &etroc_init_pos_{$chip_loc} $pos                        ## save ETROC_INIT_POS_[LOC]
        COPY &etroc_init_rot_{$chip_loc} $rot_fixed                  ## save ETROC_INIT_ROT_[LOC]
        COPY &etroc_init_pos_num_{$mod_idx}_{$chip_idx} $chip_loc    ## save ETROC_INIT_POS_NUM_[MOD]_[IDX]
        GOTOIFN @ETROC_SURVEY_INNER_LOOP_START &do_lgad_survey       ## skip LGAD survey?
        COPY $lgad_loc_pos {0,0,-0.4}
        TRANSFORML2G $lgad_target_pos $lgad_loc_pos $pos $rot
        COPY $lgad_target_rot $rot
        CALL @SURVEY_LGAD $lgad_target_pos $lgad_target_rot -> $lgad_pos $lgad_rot                  ## survey LGDA
        CALL @PRINT_SURVEY_RESULTS $lgad_target_pos $lgad_target_rot $lgad_pos $lgad_rot $chip_loc  ##print surveyresults to logfile
        GOTO @ETROC_SURVEY_INNER_LOOP_START
    @ETROC_SURVEY_INNER_LOOP_END
    GOTO @ETROC_SURVEY_LOOP_START
@ETROC_SURVEY_LOOP_END

###==============================================================
###==============================================================
SETLIGHT 0                                        ## turn offn camera light
LOADTOOL etl_picker_tool                          ## pick up corresponding tool
COPY $mod_idx 0
@ASSY_LOOP_START
    INC $mod_idx $mod_idx                         ## increment index
    GOTOIF @ASSY_LOOP_END `$mod_idx>4`            ## exit loop condition
    GOTOIFN @ASSY_LOOP_START &enabled_{$mod_idx}  ## skip this module?
    PRINT "Begin pick-and-place for Module %d, ID=%d" $mod_idx &id_{$mod_idx}
    CALL @PICK_AND_PLACE $pcb_chuck_num $mod_idx $etroc_chuck_num 1  ## pick and place sensor 1 
    CALL @PICK_AND_PLACE $pcb_chuck_num $mod_idx $etroc_chuck_num 2  ## pick and place sensor 2
    CALL @PICK_AND_PLACE $pcb_chuck_num $mod_idx $etroc_chuck_num 3  ## pick and place sensor 3
    CALL @PICK_AND_PLACE $pcb_chuck_num $mod_idx $etroc_chuck_num 4  ## pick and place sensor 4
    GOTO @ASSY_LOOP_START
@ASSY_LOOP_END
UNLOADTOOL                                        ## store back corresponding tool

SETVAC etl_chuck_{$pcb_chuck_num} 0               ## turn off vaccuum
PRINT "Assembly Completed"
MOVENAME home
END

###==============================================================
###==============================================================
###==============================================================
###==============================================================
###==============================================================
###==============================================================
###==============================================================
###==============================================================

@PICK_AND_PLACE(pcb_chuck_num,pcb_pos_num,etroc_chuck_num,etroc_pos_num)
#Arguments
#    pcb_chuck_num   = chuck number of the Module PCB
#    pcb_pos_num     = position number of the Module PCB
#    etroc_chuck_num = chuck number of ETROC+LGAD subasssemblies
#    etroc_pos_num   = position on the module PCB (1-4)
    FLEXREAD $top_thickness thickness.top

    #Puts relative alignment of subassemblies in gantry coordinates using Module PCB position
    COPY $pcb_pos &pcb_init_pos_{$pcb_pos_num}                                    ## retrieve PCB_INIT_POS_[MOD]
    COPY $pcb_rot &pcb_init_rot_{$pcb_pos_num}                                    ## retrieve PCB_INIT_ROT_[MOD]
    COPY $etroc_target_pos &etroc_target_pos_{$pcb_pos_num}_{$etroc_pos_num}      ## retrieve ETROC_TARGET_[CHUCK]_[MODULE]
    COPY $etroc_init_pos_num &etroc_init_pos_num_{$pcb_pos_num}_{$etroc_pos_num}  ## retrieve ETROC_INIT_POS_NUM
    COPY $etroc_init_pos &etroc_init_pos_{$etroc_init_pos_num}                    ## retrieve ETROC_INIT_POS
    COPY $etroc_init_rot &etroc_init_rot_{$etroc_init_pos_num}                    ## retrieve ETROC_INIT_ROT

    # Extra head rotation mitigation between UNL and FNAL.
    GOTOIF @PCB_ROT_NO_CHANGE `$pcb_rot>-45`
    ADD $etroc_init_rot $etroc_init_rot 90
    ADD $pcb_rot $pcb_rot 90
    @PCB_ROT_NO_CHANGE
    #MOVENAME etl_chuck_{$etroc_chuck_num} "" direct  ## move to CHUCK
    PICKPART $etroc_init_pos $etroc_init_rot etl_chuck_{$etroc_chuck_num}_pos_{$etroc_init_pos_num}  ## pick ETROC_INIT_POS ETL_CHUCK_[CHUCK]_POS_[ETROC]
    #MOVENAME etl_chuck_{$pcb_chuck_num} "" direct    ## move to PCB CHUCK
    PLACEPART $etroc_target_pos $pcb_rot             ## place ETROC_TARGET_POS with rotation
    RETURN


@PRINT_SURVEY_RESULTS(target_pos,target_rot,meas_pos,meas_rot,chip_num)
    PRINT "CHIP %d:" $chip_num
    PRINT "    target: %v | %f deg" $target_pos $target_rot
    PRINT "    actual: %v | %f deg" $meas_pos $meas_rot
    SUB $pos_err $meas_pos $target_pos
    SUB $rot_err $meas_rot $target_rot
    PRINT "    delta:  %v | %f deg" $pos_err $rot_err
    RETURN

@SURVEY_PCB(chuck_num,pos_num)
# Arguments: $chuck_num
#            $pos_num
# Returns:   $pos - center
#            $rot - rotation in x-y plane
    COPY $pos_default &default.Module_PCB.{$chuck_num}.{$pos_num}.pos
    COPY $rot_default &default.Module_PCB.{$chuck_num}.{$pos_num}.rot
    COPY $tr_local &geometry.Module_PCB.fid_tr
    COPY $tl_local &geometry.Module_PCB.fid_tl
    COPY $bl_local &geometry.Module_PCB.fid_bl
    COPY $br_local &geometry.Module_PCB.fid_br
    CALL @L2G_ACQUIREFIDUCIAL $pos_default $rot_default $tr_local $tl_local $bl_local $br_local -> $tr_corrected $tl_corrected $bl_corrected $br_corrected
    FIT $pos $rot $_ Module_PCB $tr_corrected $br_corrected $bl_corrected $tl_corrected
    QUAT2EULER $phi $_ $_ $rot
    RETURN $pos $phi

@SURVEY_ETROC(chuck_num,pos_num)
# Arguments: $chuck_num
#            $pos_num
# Returns:   $pos - center
#            $rot - rotation in x-y plane
    COPY $pos_default &default.ETROC.{$chuck_num}.{$pos_num}.pos
    COPY $rot_default &default.ETROC.{$chuck_num}.{$pos_num}.rot
    COPY $tr_local &geometry.ETROC.fid_tr
    COPY $tl_local &geometry.ETROC.fid_tl
    COPY $bl_local &geometry.ETROC.fid_bl
    COPY $br_local &geometry.ETROC.fid_br
    CALL @L2G_ACQUIREFIDUCIAL $pos_default $rot_default $tr_local $tl_local $bl_local $br_local -> $tr_corrected $tl_corrected $bl_corrected $br_corrected
    FIT $pos $rot $_ ETROC $tr_corrected $br_corrected $bl_corrected $tl_corrected
    QUAT2EULER $phi $_ $_ $rot
    RETURN $pos $phi

@SURVEY_LGAD(pos_default,rot_default)
# Arguments: $pos
#            $rot
# Returns:   $pos - center
#            $rot - rotation in x-y plane
    COPY $tr_local &geometry.LGAD.fid_tr
    COPY $tl_local &geometry.LGAD.fid_tl
    COPY $bl_local &geometry.LGAD.fid_bl
    COPY $br_local &geometry.LGAD.fid_br
    CALL @L2G_ACQUIREFIDUCIAL $pos_default $rot_default $tr_local $tl_local $bl_local $br_local -> $tr_corrected $tl_corrected $bl_corrected $br_corrected
    FIT $pos $rot $_ LGAD $tr_corrected $br_corrected $bl_corrected $tl_corrected
    QUAT2EULER $phi $_ $_ $rot
    RETURN $pos $phi

@L2G_ACQUIREFIDUCIAL(pos_default,rot_default,tr_local,tl_local,bl_local,br_local)
    # Arguments:
    #  $pos - center
    #  $rot - center
    #  $topright_pos
    #  $topleft_pos
    #  $bottomleft_pos
    #  $bottomright_pos
    # Returns
    #  $tr corrected
    #  $tl corrected
    #  $bl corrected
    #  $br corrected

    #converts the local coordinates to global gantry coordinates usint start location and orientation
    TRANSFORML2G $tr_global $tr_local $pos_default $rot_default
    TRANSFORML2G $tl_global $tl_local $pos_default $rot_default
    TRANSFORML2G $bl_global $bl_local $pos_default $rot_default
    TRANSFORML2G $br_global $br_local $pos_default $rot_default

    #this is to get corrected centers and orientation, the code above gives general area
    CALL @ACQUIREFIDUCIAL $tr_global -> $tr_corrected
    CALL @ACQUIREFIDUCIAL $br_global -> $br_corrected
    CALL @ACQUIREFIDUCIAL $tl_global -> $tl_corrected
    CALL @ACQUIREFIDUCIAL $bl_global -> $bl_corrected

    RETURN $tr_corrected $tl_corrected $bl_corrected $br_corrected

@ACQUIREFIDUCIAL(start_pos)
    # Arguments:
    #  $start_pos - Position to initially search for the fiducial
    MOVETO $start_pos 100

    # GOTO @manual_fiducial_acquisition
    COPY &vision.autofocus.step_size 0.2
    SETLIGHT $low_int
    AUTOFOCUS $_ 1.2 "" autoclose
    SETLIGHT $high_int

    SETERRORMODE setvar
    WAIT 50
    FINDFID $fid_position etl_throughput_etroc
    GOTOIF @manual_fiducial_acquisition $ERR
    SETERRORMODE default
    RETURN $fid_position
    
    @manual_fiducial_acquisition
    SETERRORMODE default
    SETLIGHT $low_int
    VIDEO
    SETLIGHT $high_int
    getpos $fid_position
    RETURN $fid_position


@FIX_ROT(rot)
    #Arguments:
    #  rot - rotation that needs to be fixed due to calculation falling outside atan2's range
    GOTOIF @POS `$rot>=0`
    ADD $rot $rot 180 #not positive so add 180
    RETURN $rot
    @POS
    SUB $rot $rot 180 #This is positive so subtract 180
    RETURN $rot


